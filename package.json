{
  "name": "extension-dev-helper",
  "displayName": "Extension Development Helper",
  "description": "Helper for VSCode Extension Development",
  "version": "2.0.6",
  "license": "MIT",
  "publisher": "cweijan",
  "engines": {
    "vscode": "^1.68.0"
  },
  "icon": "images/logo.png",
  "categories": [
    "Snippets",
    "Other"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/vscode-ext-studio/vscode-extension-dev-helper"
  },
  "bugs": {
    "url": "https://github.com/vscode-ext-studio/vscode-extension-dev-helper/issues"
  },
  "activationEvents": [
    "onLanguage:json",
    "onLanguage:javascript",
    "onLanguage:typescript",
    "onLanguage:javascriptreact",
    "onLanguage:typescriptreact",
    "onLanguage:vue",
    "onLanguage:html"
  ],
  "main": "./out/extension",
  "contributes": {
    "snippets": [
      {
        "language": "javascript",
        "path": "./snippets/javascript.json"
      },
      {
        "language": "typescript",
        "path": "./snippets/javascript.json"
      },
      {
        "language": "java",
        "path": "./snippets/java.json"
      },
      {
        "language": "vue",
        "path": "./snippets/vue.json"
      }
    ],
    "grammars": [
      {
        "path": "./syntaxes/string-injection-sql.json",
        "scopeName": "inline-sql.injection",
        "injectTo": [
          "source.java",
          "source.js",
          "source.ts",
          "source.tsx"
        ],
        "embeddedLanguages": {
          "meta.embedded.sql": "sql"
        }
      }
    ],
    "commands": [
      {
        "command": "extension.runFile",
        "title": "Run Script",
        "icon": "$(run)"
      },
      {
        "command": "extension.debugFile",
        "title": "Debug Script",
        "icon": "$(debug)"
      },
      {
        "command": "npm.jumper.search",
        "title": "Search node_modules"
      },
      {
        "command": "extension.gotoNpm",
        "title": "Go to Npm"
      },
      {
        "command": "extension.closeOtherTerminals",
        "title": "Close Other Terminals",
        "icon": "$(close-all)"
      },
      {
        "command": "extension.closeAllTerminals",
        "title": "Close All Terminals",
        "icon": "$(close-all)"
      }
    ],
    "menus": {
      "editor/title": [
        {
          "command": "extension.runFile",
          "when": "resourceLangId == javascript || resourceLangId == typescript",
          "group": "navigation@-2"
        },
        {
          "command": "extension.debugFile",
          "when": "resourceLangId == javascript || resourceLangId == typescript",
          "group": "navigation@0"
        }
      ],
      "explorer/context": [
        {
          "command": "npm.jumper.search",
          "when": "explorerResourceIsFolder && resourceFilename == 'node_modules'",
          "group": "0navigation@1"
        }
      ],
      "editor/context": [
        {
          "command": "extension.gotoNpm",
          "when": "resourceFilename == package.json || resourceFilename == dependencies.jsonc",
          "group": "navigation@1.1"
        }
      ],
      "terminal/context": [
        {
          "command": "extension.closeOtherTerminals",
          "when": "terminalCount > 1",
          "group": "navigation"
        },
        {
          "command": "extension.closeAllTerminals",
          "group": "navigation"
        }
      ],
      "terminal/title/context": [
        {
          "command": "extension.closeOtherTerminals",
          "when": "terminalCount > 1",
          "group": "navigation"
        }
      ]
    },
    "configuration": {
      "title": "Extension Configuration",
      "properties": {
        "runner.jsRunner": {
          "type": "object",
          "default": {
            "command": "node",
            "args": []
          },
          "description": "Configuration for JavaScript file runner"
        },
        "runner.tsRunner": {
          "type": "object",
          "default": {
            "command": "tsx",
            "args": []
          },
          "description": "Configuration for TypeScript file runner"
        },
        "postfix.languages": {
          "type": "array",
          "description": "A list of languages in which the completion will be available",
          "default": [
            "javascript",
            "typescript",
            "javascriptreact",
            "typescriptreact",
            "vue",
            "svelte",
            "html"
          ]
        },
        "postfix.undefinedMode": {
          "type": "string",
          "markdownDescription": "Determines how the `.undefined` and `.notundefined` templates work",
          "default": "Equal",
          "enum": [
            "Equal",
            "Typeof"
          ],
          "enumDescriptions": [
            "if (expr === undefined)",
            "if (typeof expr === \"undefined\")"
          ]
        },
        "postfix.snippetPreviewMode": {
          "type": "string",
          "enum": [
            "raw",
            "inserted"
          ],
          "default": "inserted",
          "markdownEnumDescriptions": [
            "Raw snippet as you defined in settings.json",
            "The inserted text variant"
          ]
        },
        "postfix.customTemplates": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "name",
              "body"
            ],
            "defaultSnippets": [
              {
                "label": "New postfix",
                "body": {
                  "name": "$1",
                  "body": "$2",
                  "when": [
                    "$3"
                  ]
                }
              }
            ],
            "properties": {
              "name": {
                "type": "string",
                "suggestSortText": "0",
                "description": "Name of the template. It will be used in auto-complete suggestions"
              },
              "description": {
                "type": "string",
                "description": "Description of the template. It will be used in auto-complete suggestions"
              },
              "body": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                ],
                "markdownDescription": "Body of the template. `{{expr}}` will be replaced with the expression before the cursor"
              },
              "when": {
                "type": "array",
                "description": "Context in which the template should be suggested",
                "uniqueItems": true,
                "items": {
                  "type": "string",
                  "enum": [
                    "identifier",
                    "expression",
                    "binary-expression",
                    "unary-expression",
                    "function-call",
                    "new-expression",
                    "string-literal",
                    "type"
                  ]
                }
              }
            }
          }
        },
        "postfix.customTemplate.mergeMode": {
          "type": "string",
          "markdownDescription": "Determines how custom templates are shown if they share a name with built-in template:\n`append` - both built-in and custom template will be shown\n`override` - only custom template will be shown (it overrides built-in one)",
          "default": "append",
          "enum": [
            "append",
            "override"
          ]
        },
        "postfix.inferVariableName": {
          "type": "boolean",
          "markdownDescription": "Try to guess variable names for `var`, `let`, `const`, `forEach` and `forof` templates.",
          "default": true
        },
        "postfix.disabledBuiltinTemplates": {
          "type": "array",
          "markdownDescription": "Name all built-in templates that you want to disable, eg. `forof`",
          "items": {
            "type": "string"
          },
          "uniqueItems": true,
          "default": []
        },
        "npm-outdated.ignore": {
          "order": 500,
          "type": "array",
          "default": [],
          "items": {
            "type": "string"
          },
          "markdownDescription": "List of package names to ignore when checking for outdated packages."
        },
        "npm-outdated.level": {
          "order": 1000,
          "type": "string",
          "default": "major",
          "enum": [
            "major",
            "minor",
            "patch"
          ],
          "enumDescriptions": [
            "It will only display an update notice when there is a major version update (eg from 1.0.0 to 2.0.0).",
            "It will only display an update notice when there is a minor version update (eg from 1.0.0 to 1.1.0).",
            "It will only display an update notice when there is a patch version update (eg from 1.0.0 to 1.0.1)."
          ],
          "markdownDescription": "Minimum *semver* bump required for a package to display as outdated. See npm's [Semver docs](https://docs.npmjs.com/cli/v6/using-npm/semver) for more details."
        },
        "npm-outdated.majorUpdateProtection": {
          "order": 2000,
          "type": "boolean",
          "default": false,
          "markdownDescription": "Avoid suggesting that a package be upgraded to a `major` version directly. The suggestion will only happen if the user-defined version is the latest `minor` version available."
        },
        "npm-outdated.decorations": {
          "order": 3000,
          "type": "string",
          "enum": [
            "fancy",
            "simple",
            "disabled"
          ],
          "enumDescriptions": [
            "Details are colorful and much easier to identify.",
            "Details are displayed in a simpler, less flashy, but still informative way. Helps performance if you don't care about colors.",
            "Details will not be displayed directly, but you will still see it when hovering over the package version in a tooltip."
          ],
          "default": "disabled",
          "markdownDescription": "Displays decorations on the right side of packages containing more details about upgrade possibilities."
        },
        "npm-outdated.cacheLifetime": {
          "order": 9000,
          "type": "number",
          "default": 60,
          "minimum": 1,
          "markdownDescription": "Time in minutes in which the versions of packages already analyzed will be kept internally. Performance improvement."
        },
        "npm-outdated.parallelProcessesLimit": {
          "order": 9100,
          "type": "number",
          "default": 20,
          "minimum": 0,
          "markdownDescription": "Defines how much packages can be analyzed together. A high value processes faster but consumes much more CPU. Set `0` to disable this limit (but use with moderation)."
        }
      }
    },
    "languages": [
      {
        "id": "jsonc",
        "filenames": [
          "dependencies.jsonc"
        ],
        "aliases": [
          "JSON with Comments"
        ]
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "node build.mjs --production",
    "compile": "node build.mjs",
    "test": "cross-env NODE_ENV=test node ./out/test/runTests.js",
    "lint": "eslint .",
    "package": "vsce package --no-dependencies",
    "deploy": "vsce publish"
  },
  "devDependencies": {
    "@stylistic/eslint-plugin-js": "^4.2.0",
    "@types/node": "^20.17.23",
    "@types/vscode": "^1.68.0",
    "esbuild": "^0.17.4",
    "eslint": "^9.0.0",
    "eslint-plugin-unused-imports": "^4.0.0",
    "typescript-eslint": "^8.29.1"
  },
  "dependencies": {
    "inflection": "^3.0.2",
    "typescript": "^5.0.4",
    "vscode-snippet-parser": "^0.0.5"
  }
}